#!/bin/bash
# Nodestats
# Telegram   : @Nocdem 
# Description: This script generates an HTML page displaying various information about the status of a Cellframe node .
#              It includes details about version, CPU and memory utilization, network, certificates, and wallet information.
#              Some checks as well to run a masternode.               
#              This script is intended to be run in a CGI environment.
# Prerequisites:
# 1. Node Application - Make sure the Node application is installed and configured on your system.
#
# Installation Steps:
# 
# 1. Set Execute Permissions:
#    chmod +x node_status
#
# 2. Update Paths (Optional):
#    If necessary, update paths in the script to match the location of your `cellframe-node-cli` tool and other dependencies.
#
# 3. Configure Web Server:
#    Configure your web server to execute CGI scripts. 
#    
# 4. Copy the scrpt to
#    /cgi-bin/ /path/to/cgi-bin/
#
# 5. Access the Web Page:
#    Access the Node Status web page in your browser. The URL will depend on your web server configuration.
#    http://your-server/cgi-bin/node_status
#
# Note:
# - The script is configured to refresh every 60 seconds by default. You can adjust this interval by modifying the `meta refresh` tag in the script.
# - Customize the script output to match your specific Node application environment.
# - Make sure the web server user has the necessary permissions to execute the script and access relevant files.

# Log file path
LOG_FILE="~/node_error.log"


# Function to log error messages
log_error() {
    local message="$1"
    echo "$(date "+%Y-%m-%d %H:%M:%S") - ERROR: $message" >> "$LOG_FILE"
}


echo "Content-type: text/html"
echo ""
echo "<html>"
echo "<head>"
echo "<title>Node Status</title>"
echo "<meta http-equiv=\"refresh\" content=\"60\">"
echo "<style>"
echo "#block-list { display: none; }"
echo "</style>"
echo "<script>"
echo "function toggleBlockList() {"
echo "  var blockList = document.getElementById('block-list');"
echo "  if (blockList.style.display === 'none') {"
echo "    blockList.style.display = 'block';"
echo "  } else {"
echo "    blockList.style.display = 'none';"
echo "  }"
echo "}"
echo "</script>"
echo "</head>"
echo "<body>"
echo ""
echo "<pre id=\"output\">"


echo -n "Hostname :" ; hostname


activetime=$(systemctl status cellframe-node) #
echo "$activetime" | sed 's/^[[:space:]]*//' | grep Active
#Get version & cpu & mem
latest_version=$(wget -qO- https://pub.cellframe.net/linux/cellframe-node/master/node-version-badge.svg | grep -o '<text x="114" y="14">.*</text>' | sed -n 's/.*>\(.*\)<\/text>.*/\1/p' | sed 's/\./-/2')
current_version=$(/opt/cellframe-node/bin/cellframe-node-cli version | awk '{print $3}')
echo -n "Current node version :"
if [[ "$current_version" == "$latest_version" ]]; then
  echo "<span style='background-color: green; color: white; padding: 0.2em 0.5em; border-radius: 3px; margin-left: 10px;'>$current_version</span>"
else
  echo "<span style='background-color: red; color: white; padding: 0.2em 0.5em; border-radius: 3px; margin-left: 10px;'>$current_version >> $latest_version</span>"
fi


cpu_stats=$(/opt/cellframe-node/bin/cellframe-node-cli stats cpu)  # Get CPU statistics using cellframe-node-cli
mem_stats=$(cat /proc/meminfo)  # Read memory statistics from /proc/meminfo

total_memory=$(echo "$mem_stats" | grep "MemTotal" | awk '{print $2}')  # Extract total memory value
free_memory=$(echo "$mem_stats" | grep "MemAvailable" | awk '{print $2}')  # Extract availble memory value

used_memory=$((total_memory - free_memory))  # Calculate used memory
memory_utilization=$((used_memory * 100 / total_memory))  # Calculate memory utilization percentage

cpu_utilization=$(echo "$cpu_stats" | grep "Total" | sed 's/^......//' | sed 's/^[[:space:]]*//')  # Extract CPU utilization

if [[ $cpu_utilization -gt 90 ]]; then
  cpu_color="red"
    log_error "High cpu usage"

else
  cpu_color="green"
fi

# Check memory utilization and set color
if [[ $memory_utilization -gt 90 ]]; then
  memory_color="red"
    log_error "High memory usage"

else
  memory_color="green"
fi

echo ""
# Display CPU Utilization with color based on utilization percentage
echo -n "CPU Utilization      : "
echo "<span style='background-color: $cpu_color; color: white; padding: 0.2em 0.5em; border-radius: 3px;'> $cpu_utilization</span>"

# Display Memory Utilization with color based on utilization percentage
echo -n "Memory Utilization   : "
echo "<span style='background-color: $memory_color; color: white; padding: 0.2em 0.5em; border-radius: 3px;'> $memory_utilization %</span>"

echo ""

#Get networks certicaftes and wallet info.
networks=$(/opt/cellframe-node/bin/cellframe-node-cli net list | grep -oP '(?<=^\t)[^ ]+')
certs=$(ls /opt/cellframe-node/var/lib/ca/ | grep -oP '^(?!node-addr-).*dcert' | sed 's/.dcert//g')
wallets=$(ls /opt/cellframe-node/var/lib/wallet/ | sed 's/.dwallet//g')

while read -ra network; do

#Get networrk information
    status=$(/opt/cellframe-node/bin/cellframe-node-cli net get status -net "$network")
    node_address=$(echo "$status" | grep -oP 'cur node address \K\S+')
    node_state=$(echo "$status" | grep 'has state' | sed 's/.*has state //; s/,.*//; s/([^()]*)//g')
    network_target_state=$(echo "$status" | grep 'target state' | sed 's/.*target state //; s/),.*//')

    fee_addr=$(cat /opt/cellframe-node/etc/network/"$network"".cfg" | grep "fee_addr="  | sed 's/^.........//')
    cert_name=$(cat /opt/cellframe-node/etc/network/"$network"".cfg" | grep "blocks-sign-cert="  | sed 's/^.................//')
    node_status=$(cat /opt/cellframe-node/etc/network/"$network"".cfg" | grep node-role)

checklist=0
#Check
if /opt/cellframe-node/bin/cellframe-node-cli srv_stake order list -net "$network" | grep -q "$node_address"; then
((checklist++))
fi


#Check
if /opt/cellframe-node/bin/cellframe-node-cli node dump  -net "$network" | grep -q "$node_address"; then
((checklist++))
fi

#Check
if ! /opt/cellframe-node/bin/cellframe-node-cli srv_stake list keys -net "$network" -cert "$cert_name" | grep -q "Active: false"; then

((checklist++))

fi

#Check
#if "$node_state" -ne "NET_STATE_OFFLINE"

#echo "<span style='background-color: red; color: white; padding: 0.2em 0.5em; border-radius: 3px;'> Net State offline!</span>"


#else

#echo "network check"

#fi

#check node state
    if [[ $checklist -eq 3 ]]; then
        echo -n "<span style='background-color: green; color: white; padding: 0.2em 0.5em; border-radius: 3px;'>Network >>>></span>"
    else
        echo -n "<span style='background-color: red; color: white; padding: 0.2em 0.5em; border-radius: 3px;'>Network >>>></span>"
    fi

    echo "<button onclick=\"var blockList = document.getElementById('$network'); if (blockList.style.display === 'none') { blockList.style.display = 'block'; this.innerHTML = '$network'; } else { blockList.style.display = 'none'; this.innerHTML = '$network'; }\">$network</button>"
    echo "    <div id=\"$network\" style=\"display:none\">"
    echo "    Our Node Status      : $node_status"
    echo "    Our Node Address     : $node_address"
    echo -n "    Our Node State       :"

    if [[ "$node_state" == "NET_STATE_ONLINE " ]]; then
        echo "<span style='background-color: green; color: white; padding: 0.2em 0.5em; border-radius: 3px;'>Online</span>"
    else
        echo "<span style='background-color: red; color: white; padding: 0.2em 0.5em; border-radius: 3px;'>$node_state</span>"
    fi

        echo "    Network        State : $network_target_state"
        echo ""


#Check
if /opt/cellframe-node/bin/cellframe-node-cli srv_stake order list -net "$network" | grep -q "$node_address"; then
  echo ""
else
  echo "<span style='background-color: red; color: white; padding: 0.2em 0.5em; border-radius: 3px;'>$node_address does not have an active order</span>t"
    log_error "$node_address does not have an active order"

fi


#Check
if /opt/cellframe-node/bin/cellframe-node-cli node dump  -net "$network" | grep -q "$node_address"; then
  echo ""
else
  echo "<span style='background-color: red; color: white; padding: 0.2em 0.5em; border-radius: 3px;'>$node_address is not in node list</span>t"
extip=$(dig +short myip.opendns.com @resolver1.opendns.com) #

echo "cellframe-node-cli node add -net $network -ipv4 $extip -port 8079"
    log_error "$node_address is not in node list<"

fi

#Check
if /opt/cellframe-node/bin/cellframe-node-cli srv_stake list keys -net "$network" -cert "$cert_name" | grep -q "Active: false"; then

echo "<span style='background-color: red; color: white; padding: 0.2em 0.5em; border-radius: 3px;'> Certificate not active!</span>"
    log_error " Certificate not active!"


fi



   while read -ra wallet; do

                wallet_info=$(/opt/cellframe-node/bin/cellframe-node-cli wallet info -net "$network" -w $wallet)

                if [[ "$wallet_info" == *"balance: 0"* ]]; then
                        continue
                fi

                if [[ ! -z "$wallet_info" ]]; then
                        echo "WARNING :  After delegation you should remove your wallet(s) physically from the server for security reasons"
               fi

        done <<< "$wallets"


   echo "Available Wallet information on $network"


        feewallet_info=$(/opt/cellframe-node/bin/cellframe-node-cli wallet info -net "$network" -addr  $fee_addr)
        echo "    $feewallet_info" | sed -n '/([^)]\+)/p'  | sed 's/^[ \t]*//' | sed 's/([^)]*)//g'







echo ""
        echo "Available certificate information on $network"


                block_list=$(/opt/cellframe-node/bin/cellframe-node-cli block list -net "$network" -chain main -cert "$cert_name" -unspent)
                cert_status=$(/opt/cellframe-node/bin/cellframe-node-cli srv_stake list keys -net "$network" -cert "$cert_name" -unspent)
                hashes=( $(/opt/cellframe-node/bin/cellframe-node-cli block list -net $network -chain main -cert "$cert_name" -unspent | tr -d '\t' | grep -oP '^[a-zA-Z0-9]{66}') )

                                echo "Delegated $cert_status" | grep  "Stake value"  | sed 's/^[[:space:]]*//'
                                echo ""
hashnumber=0
for hash in ${hashes[@]}
                                do
                                        let hashnumber=hashnumber+1
                                done

#check
if $(/opt/cellframe-node/bin/cellframe-node-cli block list -net $network -chain main -cert $cert | grep -q) "Have 0 blocks";then

echo /opt/cellframe-node/bin/cellframe-node-cli block list -net $network -chain main -cert $cert_name | grep -q "Have 0 blocks"


echo "0 blocks available to collect"

else

echo /opt/cellframe-node/bin/cellframe-node-cli block list -net $network -chain main -cert $cert_name | grep -q "Have 0 blocks"

echo "$hashnumber blocks available to collect"

fi




                                echo "          <button onclick=\"var blockList = document.getElementById('$cert-$network-list'); if (blockList.style.display === 'none') { blockList.style.display = 'block'; this.innerHTML = 'Hashes'; } else { blockList.style.display = 'none'; this.innerHTML = 'Hashes'; }\">Hashes</button>"
                                echo "    <div id=\"$cert-$network-list\" style=\"display:none\">"

                                for hash in ${hashes[@]}
                                do
                                        let hashnumber=hashnumber+1
                                        echo "    $hash"
                                done

                                echo "</div>"




    echo "</div>"
done <<< "$networks"


echo "</pre>"
echo "</body>"
echo "</html>"
