#!/usr/bin/python3
import os
import socket
import sys
import argparse
import re
import configparser
import logging
from time import sleep

socket_path = "/opt/cellframe-node/var/run/node_cli" # Local socket for connections
parser = argparse.ArgumentParser()
parser.add_argument("--ip", type=str, required=False, help="Host IP (ext. address)")
parser.add_argument("--port", type=int, required=False, help="Host port")
parser.add_argument("--save", type=str, required=False, help="Save connection details for later use")
parser.add_argument("--load", type=str, required=False, help="Load saved connection details")
args = parser.parse_args()

info =  '''
******************************** CELLFRAME NODE CLI ********************************
****       THIS CLIENT CAN BE USED AS A SUBSTITUTE FOR CELLFRAME-NODE-CLI       ****
************************************************************************************
'''

help = '''
Available commands:
cli-help\t\t\tPrint this help
quit\t\t\t\tExit this client
history\t\t\t\tShow history of commands
'''

def checkValidArgs():
    if args.ip or args.port or args.save:
        if args.load:
            logging.error("You need to use --load independently!\n\neg. ./cellframe-node-cli --load my_configuration\n")
            sys.exit()

def loadConnection(name):
    filepath = os.path.abspath(os.path.dirname(__file__))
    session_file = filepath + "/session.cfg"
    config = configparser.ConfigParser()
    try:
        with open(session_file) as rfile:
            config.read_file(rfile)
            if config.has_section(name):
                ip = config.get(name, "ip")
                port = config.get(name, "port")
    except:
        logging.error("Saved session not found!")
        sys.exit()
    
    return ip, port

def saveConnection(name, ip, port):
    port = str(args.port) # Int is not accepted
    filepath = os.path.abspath(os.path.dirname(__file__))
    session_file = filepath + "/session.cfg"

    config = configparser.ConfigParser()
    try:
        with open(session_file) as rfile:
            config.read_file(rfile)
    except:
        logging.info("File not found, creating new one...")

    try:
        config.add_section(name)
        config.set(name, "ip", ip)
        config.set(name, "port", port)
        config.write(open(session_file, "w"))
        print(f"\r\nSettings saved:\nName: {name}\nIP: {ip}\nPort: {port}\n")
    except:
        logging.error("Configuration with this name already exists!")
        sys.exit()


def doConnection():
    connected = False
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    while not connected:
        try:
            if args.ip and args.port:
                s.connect((args.ip, args.port))
                connected = True
            elif args.load:
                ip_addr, port = loadConnection(args.load)
                port = int(port)
                s.connect((ip_addr, port))
                connected = True
            else:
                s.connect(socket_path)
                connected = True
        except:
            logging.error("Couldn't connect to socket! Trying again... (Exit with CTRL+C)")
            sleep(5)
    return s

def main():
    checkValidArgs()
    if args.load:
        loadConnection(args.load)
        print("Settings loaded!")
    if args.ip and args.port and args.save:
        saveConnection(args.save, args.ip, args.port)
    commands = []
    info_printed = False
    while True:
        if info_printed == False:
            print(info)
            print(help)
            info_printed = True
        command = input("> ")
        if len(command) == 0:
            continue
        if command == "quit": # We need to use quit for exiting the client because exit is actually sent to node...
            print("Exiting...")
            sys.exit()
        elif command == "history":
            print("\nCommands history:\r\n")
            commands.append(command)
            for cmd in commands:
                cmd = cmd.replace("\r\n", " ")
                print(cmd)
        elif command == "cli-help":
            print(help)
        else:
            s = doConnection()
            length = str(len(command))
            command = re.sub('\\s+', " ", command) # Multiple spaces are one space, yes?
            command = command.replace(" ", "\r\n")
            commands.append(command)
            post = "POST /connect HTTP/1.1\r\nHost: localhost\r\nContent-Type: text/text\r\nContent-Length: " + length + "\r\n\r\n" + command + "\r\n\r\n"
            post = bytes(post,"utf-8")
            s.sendall(post)
            reply = s.recv(65536)
            reply = reply.decode("utf-8")
            reply = reply.split("\n")
            reply = list(filter(None, reply))
            reply = reply[4:]
            for replies in reply:
                print(replies)
            s.shutdown(socket.SHUT_RDWR)
            s.close()

if __name__ == "__main__":
    main()