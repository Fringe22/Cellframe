#!/usr/bin/python3
import os
import socket
import sys
import argparse
import re
import configparser
from time import sleep

socket_path = "/opt/cellframe-node/var/run/node_cli" # Local socket for connections
parser = argparse.ArgumentParser()
parser.add_argument("--ip", type=str, required=False, help="Host IP (ext. address)")
parser.add_argument("--port", type=int, required=False, help="Host port")
parser.add_argument("--save", type=str, required=False, help="Save connection details for later use")
parser.add_argument("--load", type=str, required=False, help="Load saved connection details")
args = parser.parse_args()

info =  '''
******************************** CELLFRAME NODE CLI ********************************
****       THIS CLIENT CAN BE USED AS A SUBSTITUTE FOR CELLFRAME-NODE-CLI       ****
************************************************************************************
'''

help = '''
Available commands:
cli-help\t\t\tPrint this help
quit\t\t\t\tExit this client
history\t\t\t\tShow history of commands
'''

def saveConnection(name, ip, port):
    port = str(port)
    filepath = os.path.abspath(os.path.dirname(__file__))
    session_file = filepath + "/session.ini"

    config = configparser.ConfigParser()
    
    config[name] = {
        "IP": ip,
        "Port": port
    }
    
    with open(session_file, "a") as sessionfile:
        config.write(sessionfile)
        print("Configuration saved!")
        sessionfile.close()


def doConnection():
    connected = False
    if args.ip and args.port:
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        while not connected:
            try:
                s.connect((args.ip, args.port))
                connected = True
            except:
                print("Couldn't connect to socket, is it forwarded with socat? Trying again... (Exit with CTRL+C)")
                sleep(5)
    else:
        s = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
        while not connected:
            try:
                s.connect(socket_path)
                connected = True
            except:
                print("Couldn't connect to socket! Node is running? Trying again... (Exit with CTRL+C)")
                sleep(5)
    return s

def main():
    if args.save and args.ip and args.port:
        saveConnection(args.save, args.ip, args.port)
    commands = []
    info_printed = False
    while True:
        if info_printed == False:
            print(info)
            print(help)
            info_printed = True
        command = input("> ")
        if len(command) == 0:
            continue
        if command == "quit": # We need to use quit for exiting the client because exit is actually sent to node...
            print("Exiting...")
            sys.exit()
        elif command == "history":
            print("\nCommands history:\r\n")
            commands.append(command)
            for cmd in commands:
                cmd = cmd.replace("\r\n", " ")
                print(cmd)
        elif command == "cli-help":
            print(help)
        else:
            s = doConnection()
            length = str(len(command))
            command = re.sub('\\s+', " ", command) # Multiple spaces are one space, yes?
            command = command.replace(" ", "\r\n")
            commands.append(command)
            post = "POST /connect HTTP/1.1\r\nHost: localhost\r\nContent-Type: text/text\r\nContent-Length: " + length + "\r\n\r\n" + command + "\r\n\r\n"
            post = bytes(post,"utf-8")
            s.sendall(post)
            reply = s.recv(65536)
            reply = reply.decode("utf-8")
            reply = reply.split("\n")
            reply = list(filter(None, reply))
            reply = reply[4:]
            for replies in reply:
                print(replies)
            s.shutdown(socket.SHUT_RDWR)
            s.close()

if __name__ == "__main__":
    main()